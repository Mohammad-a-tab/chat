{"version":3,"file":"static/js/240.d2dd23e8.chunk.js","mappings":"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","sources":["components/hook-form/FormProvider.js","components/Image/Image.js","components/upload/preview/AvatarPreview.js","components/upload/UploadAvatar.js","components/hook-form/RHFUpload.js","components/hook-form/RHFTextField.js","sections/auth/NewPasswordForm.js","pages/auth/NewPassword.js","../node_modules/phosphor-react/src/icons/CaretLeft.tsx"],"sourcesContent":["import PropTypes from 'prop-types';\r\n// form\r\nimport { FormProvider as Form } from 'react-hook-form';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nFormProvider.propTypes = {\r\n  children: PropTypes.node,\r\n  methods: PropTypes.object,\r\n  onSubmit: PropTypes.func,\r\n};\r\n\r\nexport default function FormProvider({ children, onSubmit, methods }) {\r\n  return (\r\n    <Form {...methods}>\r\n      <form onSubmit={onSubmit}>{children}</form>\r\n    </Form>\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\n// @mui\r\nimport { Box } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst Image = forwardRef(\r\n  ({ disabledEffect = false, effect = 'blur', sx, ...other }, ref) => {\r\n    const content = (\r\n      <Box\r\n        component={LazyLoadImage}\r\n        wrapperClassName=\"wrapper\"\r\n        effect={disabledEffect ? undefined : effect}\r\n        placeholderSrc={disabledEffect ? '/assets/transparent.png' : '/assets/placeholder.svg'}\r\n        sx={{ width: 1, height: 1, objectFit: 'cover' }}\r\n        {...other}\r\n      />\r\n    );\r\n\r\n    return (\r\n      <Box\r\n        ref={ref}\r\n        component=\"span\"\r\n        sx={{\r\n          lineHeight: 1,\r\n          display: 'block',\r\n          overflow: 'hidden',\r\n          position: 'relative',\r\n          '& .wrapper': {\r\n            width: 1,\r\n            height: 1,\r\n            backgroundSize: 'cover !important',\r\n          },\r\n          ...sx,\r\n        }}\r\n      >\r\n        {content}\r\n      </Box>\r\n    );\r\n  }\r\n);\r\n\r\nImage.propTypes = {\r\n  sx: PropTypes.object,\r\n  effect: PropTypes.string,\r\n  disabledEffect: PropTypes.bool,\r\n};\r\n\r\nexport default Image;\r\n","import PropTypes from 'prop-types';\r\n//\r\nimport Image from '../../Image';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nAvatarPreview.propTypes = {\r\n  file: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n};\r\n\r\nexport default function AvatarPreview({ file }) {\r\n  if (!file) {\r\n    return null;\r\n  }\r\n\r\n  const imgUrl = typeof file === 'string' ? file : file.preview;\r\n\r\n  return (\r\n    <Image\r\n      alt=\"avatar\"\r\n      src={imgUrl}\r\n      sx={{\r\n        zIndex: 8,\r\n        overflow: 'hidden',\r\n        borderRadius: '50%',\r\n        position: 'absolute',\r\n        width: `calc(100% - 16px)`,\r\n        height: `calc(100% - 16px)`,\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import PropTypes from \"prop-types\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n// @mui\r\nimport { Typography } from \"@mui/material\";\r\nimport { styled, alpha } from \"@mui/material/styles\";\r\n//\r\nimport AvatarPreview from \"./preview/AvatarPreview\";\r\nimport { Image } from \"phosphor-react\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst StyledDropZone = styled(\"div\")(({ theme }) => ({\r\n  width: 144,\r\n  height: 144,\r\n  margin: \"auto\",\r\n  display: \"flex\",\r\n  cursor: \"pointer\",\r\n  overflow: \"hidden\",\r\n  borderRadius: \"50%\",\r\n  alignItems: \"center\",\r\n  position: \"relative\",\r\n  justifyContent: \"center\",\r\n  border: `1px dashed ${alpha(theme.palette.grey[500], 0.32)}`,\r\n}));\r\n\r\nconst StyledPlaceholder = styled(\"div\")(({ theme }) => ({\r\n  zIndex: 7,\r\n  display: \"flex\",\r\n  borderRadius: \"50%\",\r\n  position: \"absolute\",\r\n  alignItems: \"center\",\r\n  flexDirection: \"column\",\r\n  justifyContent: \"center\",\r\n  width: `calc(100% - 16px)`,\r\n  height: `calc(100% - 16px)`,\r\n  color: theme.palette.text.disabled,\r\n  backgroundColor: theme.palette.background.neutral,\r\n  transition: theme.transitions.create(\"opacity\", {\r\n    easing: theme.transitions.easing.easeInOut,\r\n    duration: theme.transitions.duration.shorter,\r\n  }),\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nUploadAvatar.propTypes = {\r\n  sx: PropTypes.object,\r\n  error: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  helperText: PropTypes.node,\r\n  file: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n};\r\n\r\nexport default function UploadAvatar({\r\n  error,\r\n  file,\r\n  disabled,\r\n  helperText,\r\n  sx,\r\n  ...other\r\n}) {\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragReject,\r\n  } = useDropzone({\r\n    multiple: false,\r\n    disabled,\r\n    ...other,\r\n  });\r\n\r\n  const hasFile = !!file;\r\n\r\n  const isError = isDragReject || !!error;\r\n\r\n  return (\r\n    <>\r\n      <StyledDropZone\r\n        {...getRootProps()}\r\n        sx={{\r\n          ...(isDragActive && {\r\n            opacity: 0.72,\r\n          }),\r\n          ...(isError && {\r\n            borderColor: \"error.light\",\r\n            ...(hasFile && {\r\n              bgcolor: \"error.lighter\",\r\n            }),\r\n          }),\r\n          ...(disabled && {\r\n            opacity: 0.48,\r\n            pointerEvents: \"none\",\r\n          }),\r\n          ...(hasFile && {\r\n            \"&:hover\": {\r\n              \"& .placeholder\": {\r\n                opacity: 1,\r\n              },\r\n            },\r\n          }),\r\n          ...sx,\r\n        }}\r\n      >\r\n        <input {...getInputProps()} />\r\n\r\n        {hasFile && <AvatarPreview file={file} />}\r\n\r\n        <StyledPlaceholder\r\n          className=\"placeholder\"\r\n          sx={{\r\n            \"&:hover\": {\r\n              opacity: 0.72,\r\n            },\r\n            ...(hasFile && {\r\n              zIndex: 9,\r\n              opacity: 0,\r\n              color: \"common.white\",\r\n              bgcolor: (theme) => alpha(theme.palette.grey[900], 0.64),\r\n            }),\r\n            ...(isError && {\r\n              color: \"error.main\",\r\n              bgcolor: \"error.lighter\",\r\n            }),\r\n          }}\r\n        >\r\n          <Image />\r\n\r\n          <Typography variant=\"caption\">\r\n            {file ? \"Update photo\" : \"Upload photo\"}\r\n          </Typography>\r\n        </StyledPlaceholder>\r\n      </StyledDropZone>\r\n\r\n      {helperText && helperText}\r\n    </>\r\n  );\r\n}","import PropTypes from 'prop-types';\r\n// form\r\nimport { useFormContext, Controller } from 'react-hook-form';\r\n// @mui\r\nimport { FormHelperText } from '@mui/material';\r\n//\r\nimport { UploadAvatar } from '../upload';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nRHFUploadAvatar.propTypes = {\r\n  name: PropTypes.string,\r\n};\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function RHFUploadAvatar({ name, ...other }) {\r\n  const { control } = useFormContext();\r\n\r\n  return (\r\n    <Controller\r\n      name={name}\r\n      control={control}\r\n      render={({ field, fieldState: { error } }) => (\r\n        <div>\r\n          <UploadAvatar\r\n            accept={{\r\n              'image/*': [],\r\n            }}\r\n            error={!!error}\r\n            file={field.value}\r\n            {...other}\r\n          />\r\n\r\n          {!!error && (\r\n            <FormHelperText error sx={{ px: 2, textAlign: 'center' }}>\r\n              {error.message}\r\n            </FormHelperText>\r\n          )}\r\n        </div>\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\n","import PropTypes from 'prop-types';\r\n// form\r\nimport { useFormContext, Controller } from 'react-hook-form';\r\n// @mui\r\nimport { TextField } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nRHFTextField.propTypes = {\r\n  name: PropTypes.string,\r\n  helperText: PropTypes.node,\r\n};\r\n\r\nexport default function RHFTextField({ name, helperText, ...other }) {\r\n  const { control } = useFormContext();\r\n\r\n  return (\r\n    <Controller\r\n      name={name}\r\n      control={control}\r\n      render={({ field, fieldState: { error } }) => (\r\n        <TextField\r\n          {...field}\r\n          fullWidth\r\n          \r\n          value={typeof field.value === 'number' && field.value === 0 ? '' : field.value}\r\n          error={!!error}\r\n          helperText={error ? error?.message : helperText}\r\n          {...other}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}\r\n","import { useState } from 'react';\r\nimport * as Yup from 'yup';\r\n// form\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n// @mui\r\nimport { Stack, IconButton, InputAdornment, Button } from '@mui/material';\r\n// components\r\nimport FormProvider, { RHFTextField } from '../../components/hook-form';\r\nimport { Eye, EyeSlash } from 'phosphor-react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { NewPassword } from '../../redux/slices/auth';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function NewPasswordForm() {\r\n  const dispatch = useDispatch();\r\n  const [queryParameters] = useSearchParams();\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const VerifyCodeSchema = Yup.object().shape({\r\n    \r\n    password: Yup.string()\r\n      .min(6, 'Password must be at least 6 characters')\r\n      .required('Password is required'),\r\n    passwordConfirm: Yup.string()\r\n      .required('Confirm password is required')\r\n      .oneOf([Yup.ref('password'), null], 'Passwords must match'),\r\n  });\r\n\r\n  const defaultValues = {\r\n    password: '',\r\n    passwordConfirm: '',\r\n  };\r\n\r\n  const methods = useForm({\r\n    mode: 'onChange',\r\n    resolver: yupResolver(VerifyCodeSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    handleSubmit,\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n    //   Send API Request\r\n    dispatch(NewPassword({...data, token: queryParameters.get('token')}));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n      <Stack spacing={3}>\r\n        \r\n\r\n        <RHFTextField\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          type={showPassword ? 'text' : 'password'}\r\n          InputProps={{\r\n            endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    onClick={() => setShowPassword(!showPassword)}\r\n                    edge=\"end\"\r\n                  >\r\n                    {showPassword ? <Eye /> : <EyeSlash />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              ),\r\n          }}\r\n        />\r\n\r\n        <RHFTextField\r\n          name=\"passwordConfirm\"\r\n          label=\"Confirm New Password\"\r\n          type={showPassword ? 'text' : 'password'}\r\n          InputProps={{\r\n            endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    onClick={() => setShowPassword(!showPassword)}\r\n                    edge=\"end\"\r\n                  >\r\n                    {showPassword ? <Eye /> : <EyeSlash />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              ),\r\n          }}\r\n        />\r\n\r\n        <Button\r\n          fullWidth\r\n          size=\"large\"\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          \r\n          sx={{\r\n            mt: 3,\r\n            bgcolor: \"text.primary\",\r\n            color: (theme) =>\r\n              theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n            \"&:hover\": {\r\n              bgcolor: \"text.primary\",\r\n              color: (theme) =>\r\n                theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n            },\r\n          }}\r\n        >\r\n          Update Password\r\n        </Button>\r\n      </Stack>\r\n    </FormProvider>\r\n  );\r\n}\r\n","import { Stack, Typography, Link } from \"@mui/material\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport { CaretLeft } from \"phosphor-react\";\r\nimport NewPasswordForm from \"../../sections/auth/NewPasswordForm\";\r\n\r\nconst NewPassword = () => {\r\n  return (\r\n    <>\r\n      <Stack spacing={2} sx={{ mb: 5, position: \"relative\" }}>\r\n        <Typography variant=\"h3\" paragraph>\r\n          Reset Password\r\n        </Typography>\r\n\r\n        <Typography sx={{ color: \"text.secondary\", mb: 5 }}>\r\n          Please set your new password.\r\n        </Typography>\r\n      </Stack>\r\n\r\n      {/* NewPasswordForm */}\r\n\r\n      <NewPasswordForm />\r\n\r\n      <Link\r\n        component={RouterLink}\r\n        to={\"/auth/login\"}\r\n        color=\"inherit\"\r\n        variant=\"subtitle2\"\r\n        sx={{\r\n          mt: 3,\r\n          mx: \"auto\",\r\n          alignItems: \"center\",\r\n          display: \"inline-flex\",\r\n        }}\r\n      >\r\n        <CaretLeft size={24} />\r\n        Return to sign in\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewPassword;\r\n","/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <polyline\n      points=\"160 208 80 128 160 48\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <polygon points=\"160 208 80 128 160 48 160 208\" opacity=\"0.2\" />\n    <polygon\n      points=\"160 208 80 128 160 48 160 208\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M163.1,40.6a8.4,8.4,0,0,0-8.8,1.7l-80,80a8.1,8.1,0,0,0,0,11.4l80,80A8.3,8.3,0,0,0,160,216a8.5,8.5,0,0,0,3.1-.6A8,8,0,0,0,168,208V48A8,8,0,0,0,163.1,40.6Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <polyline\n      points=\"160 208 80 128 160 48\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <polyline\n      points=\"160 208 80 128 160 48\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <polyline\n      points=\"160 208 80 128 160 48\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst CaretLeft = forwardRef<SVGSVGElement, IconProps>((props, ref) => (\n  <IconBase ref={ref} {...props} renderPath={renderPath} />\n));\n\nCaretLeft.displayName = \"CaretLeft\";\n\nexport default CaretLeft;\n"],"names":["FormProvider","children","onSubmit","methods","forwardRef","ref","disabledEffect","effect","sx","other","content","Box","component","LazyLoadImage","wrapperClassName","undefined","placeholderSrc","width","height","objectFit","lineHeight","display","overflow","position","backgroundSize","AvatarPreview","file","imgUrl","preview","alt","src","zIndex","borderRadius","StyledDropZone","styled","theme","margin","cursor","alignItems","justifyContent","border","alpha","palette","grey","StyledPlaceholder","flexDirection","color","text","disabled","backgroundColor","background","neutral","transition","transitions","create","easing","easeInOut","duration","shorter","UploadAvatar","error","helperText","getRootProps","getInputProps","isDragActive","isDragReject","useDropzone","multiple","hasFile","isError","opacity","borderColor","bgcolor","pointerEvents","className","Typography","variant","RHFUploadAvatar","name","control","useFormContext","render","field","fieldState","accept","value","FormHelperText","px","textAlign","message","RHFTextField","TextField","fullWidth","NewPasswordForm","dispatch","useDispatch","queryParameters","useSearchParams","showPassword","setShowPassword","useState","VerifyCodeSchema","Yup","shape","password","min","required","passwordConfirm","oneOf","useForm","mode","resolver","yupResolver","defaultValues","handleSubmit","async","NewPassword","data","token","get","console","Stack","spacing","label","type","InputProps","endAdornment","InputAdornment","IconButton","onClick","edge","Button","size","mt","mb","paragraph","Link","RouterLink","to","mx","pathsByWeight","Map","set","React","points","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","renderPath","weight","renderPathForWeight","CaretLeft","props","IconBase","displayName"],"sourceRoot":""}